#lang racket


;;;;;
;; Directly Testing the inferencer
;;

(require "inference.rkt"
         rackunit)


(check-equal?
 (infer-argument '() 'x 'U
                 '(Π ([_ (List x)])
                     (List x))
                 '((λ (y)
                    (λ (ls)
                      (:: y ls))) zero))
 'Nat)

(check-equal?
 (infer-argument '() 'x 'U
                 '(Π ([elem x]
                      [v (Vec x (add1 zero))])
                     (Vec x (add1 (add1 zero))))
                 '(λ (v vec)
                    (vec:: v vec)))
 'Anything)

(check-equal?
 (infer-argument '() 'x 'U
                 '(Π ([v (Vec x (add1 zero))])
                     (Vec x (add1 (add1 zero))))
                 '((λ (v vec)
                    (vec:: v vec)) zero))
 'Nat)

(check-equal?
 (infer-argument '() 'n 'Nat
                 '(Vec Nat (add1 n))
                 '((λ (v)
                     (vec:: (head v) (vec:: zero vecnil)))
                   (vec:: (add1 zero) (vec:: zero vecnil))))
 '(add1 zero))

(check-equal?
 (infer-argument '() 'n 'U
                 '(Vec n (add1 (add1 zero)))
                 '(vec:: nil (vec:: nil vecnil)))
 '(List Anything))

(check-equal?
 (infer-argument '() 'x 'U
                 '(Π ([l (List x)]) Nat)
                 '(λ (ls)
                    (rec-List ls zero (λ (a d ans) (add1 a)))))
 'Nat)

(check-equal?
 (infer-argument '() 'u 'U
                 '(List u)
                 '((λ (n) (rec-Nat n nil (λ (m ans) (:: zero ans))))
                   (add1 (add1 zero))))
 'Nat)

(check-equal?
 (infer-argument '() 'u 'U
                  '(Π ([n Nat]) u)
                  '(λ (q)
                     (ind-Nat q (λ (n) Nat)
                              zero
                              (λ (n-1)
                                (λ (IH)
                                  (add1 IH))))))
 'Nat)

(check-equal?
 (infer-argument '() 'u 'U
                  '(Π ([n Nat]) u)
                  '(λ (q)
                     (ind-Nat q (λ (n) (List Nat))
                              nil
                              (λ (n-1)
                                (λ (IH)
                                  (:: zero IH))))))
 '(List Nat))

(check-equal?
 (infer-argument '()
                  'Y 'U
                  '(Πi ([n Nat])
                       (-> (Vec Y (add1 n)) Y))
                  '(λ (vec)
                    (head vec)))
 'Anything)

(check-equal?
 (infer-argument '()
                  'Y 'U
                  'Y
                  '((λ (vec)
                      (head vec))
                    (vec:: Atom vecnil)))
 'U)